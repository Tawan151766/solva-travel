generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String         @id @default(cuid())
  email                  String         @unique
  password               String
  firstName              String
  lastName               String
  phone                  String?
  profileImage           String?
  role                   UserRole       @default(USER)
  isActive               Boolean        @default(true)
  isEmailVerified        Boolean        @default(false)
  emailVerificationToken String?
  resetPasswordToken     String?
  resetPasswordExpires   DateTime?
  lastLoginAt            DateTime?
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  bookings               Booking[]
  customRequests         CustomRequest[]
  galleryImages          Gallery[]
  reviewsReceived        Review[]       @relation("ReviewedUser")
  reviewsGiven           Review[]       @relation("ReviewerUser")
  staffProfile           StaffProfile?
  systemLogs             SystemLog[]
  users_A                User[]         @relation("StaffManagement")
  users_B                User[]         @relation("StaffManagement")

  @@map("users")
}

model StaffProfile {
  id              String          @id @default(cuid())
  userId          String          @unique
  employeeId      String          @unique
  department      Department
  position        String
  salary          Decimal?
  hireDate        DateTime
  bio             String?
  specializations String[]
  languages       String[]
  rating          Float?          @default(0)
  totalReviews    Int             @default(0)
  workSchedule    Json?
  isAvailable     Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  customRequests  CustomRequest[]
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("staff_profiles")
}

model Review {
  id             String         @id @default(cuid())
  reviewerId     String
  reviewedUserId String?
  rating         Int
  title          String?
  comment        String?
  reviewType     ReviewType     @default(SERVICE)
  bookingId      String?
  isPublic       Boolean        @default(true)
  isVerified     Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  packageId      String?
  userEmail      String?
  userName       String?
  booking        Booking?       @relation(fields: [bookingId], references: [id])
  package        TravelPackage? @relation("PackageReviews", fields: [packageId], references: [id])
  reviewedUser   User?          @relation("ReviewedUser", fields: [reviewedUserId], references: [id])
  reviewer       User           @relation("ReviewerUser", fields: [reviewerId], references: [id])

  @@map("reviews")
}

model Booking {
  id                  String         @id @default(cuid())
  bookingNumber       String         @unique
  customerId          String
  packageId           String?
  startDate           DateTime
  endDate             DateTime
  totalAmount         Decimal
  status              BookingStatus  @default(PENDING)
  assignedStaff       Json?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  bookingType         BookingType    @default(PACKAGE)
  customRequestId     String?
  customerEmail       String
  customerName        String
  customerPhone       String
  notes               String?
  numberOfPeople      Int            @default(1)
  paymentDate         DateTime?
  paymentMethod       String?
  paymentStatus       PaymentStatus  @default(PENDING)
  specialRequirements String?
  customRequest       CustomRequest? @relation(fields: [customRequestId], references: [id])
  customer            User           @relation(fields: [customerId], references: [id])
  package             TravelPackage? @relation(fields: [packageId], references: [id])
  reviews             Review[]

  @@map("bookings")
}

model TravelPackage {
  id             String    @id @default(cuid())
  name           String
  title          String?
  description    String
  overview       String?
  price          Decimal
  priceDetails   Json?
  duration       Int
  durationText   String?
  maxCapacity    Int
  location       String
  destination    String?
  category       String?
  difficulty     String?
  highlights     String[]
  includes       String[]
  excludes       String[]
  tags           String[]
  itinerary      Json?
  accommodation  Json?
  isActive       Boolean   @default(true)
  isRecommended  Boolean   @default(false)
  rating         Float?    @default(0)
  totalReviews   Int       @default(0)
  seoTitle       String?
  seoDescription String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  bookings       Booking[]
  reviews        Review[]  @relation("PackageReviews")
  galleryImages  Gallery[] @relation("PackageGallery")

  @@map("travel_packages")
}

model SystemLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@map("system_logs")
}

model Gallery {
  id          String            @id @default(cuid())
  title       String
  description String?
  imageUrl    String
  category    GalleryCategory
  location    String
  tags        String[]
  imageType   GalleryImageType? @default(GALLERY)
  packageId   String?
  isActive    Boolean           @default(true)
  uploadedBy  String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  package     TravelPackage?    @relation("PackageGallery", fields: [packageId], references: [id])
  uploader    User?             @relation(fields: [uploadedBy], references: [id])

  @@map("gallery_images")
}

// New unified CustomRequest model replacing CustomTourRequest and CustomBooking
model CustomRequest {
  id                  String               @id @default(cuid())
  requestNumber       String               @unique
  requestType         CustomRequestType    @default(TOUR_REQUEST)
  userId              String?
  contactName         String
  contactEmail        String
  contactPhone        String
  destination         String
  startDate           DateTime
  endDate             DateTime
  numberOfPeople      Int
  budget              Float?
  accommodation       String?
  transportation      String?
  activities          String?
  specialRequirements String?
  description         String?
  requireGuide        Boolean              @default(false)
  tripType            String?
  status              CustomRequestStatus  @default(PENDING)
  assignedStaffId     String?
  responseNotes       String?
  estimatedCost       Float?
  quotedPrice         Float?
  responseDate        DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  bookings            Booking[]
  assignedStaff       StaffProfile?        @relation(fields: [assignedStaffId], references: [id])
  user                User?                @relation(fields: [userId], references: [id])

  @@map("custom_requests")
}

// Enums
enum UserRole {
  USER
  STAFF
  OPERATOR
  ADMIN
  SUPER_ADMIN
}

enum Department {
  TOURS
  CUSTOMER_SERVICE
  SALES
  OPERATIONS
  MANAGEMENT
  FINANCE
  MARKETING
}

enum ReviewType {
  SERVICE
  GUIDE
  OVERALL
  BOOKING
  PACKAGE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  REFUNDED
}

enum BookingType {
  PACKAGE
  CUSTOM
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIAL
  REFUNDED
  FAILED
}

enum GalleryCategory {
  BEACH
  MOUNTAIN
  CITY
  FOREST
  DESERT
  CULTURAL
  ADVENTURE
  LUXURY
  WILDLIFE
  OTHER
}

enum GalleryImageType {
  MAIN
  ADDITIONAL
  GALLERY
}

enum CustomRequestType {
  TOUR_REQUEST
  CUSTOM_BOOKING
}

enum CustomRequestStatus {
  PENDING
  IN_PROGRESS
  QUOTED
  CONFIRMED
  CANCELLED
  COMPLETED
}
