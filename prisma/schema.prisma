generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String              @id @default(cuid())
  email                  String              @unique
  password               String
  firstName              String
  lastName               String
  phone                  String?
  profileImage           String?
  role                   UserRole            @default(USER)
  isActive               Boolean             @default(true)
  isEmailVerified        Boolean             @default(false)
  emailVerificationToken String?
  resetPasswordToken     String?
  resetPasswordExpires   DateTime?
  lastLoginAt            DateTime?
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  bookings               Booking[]
  customTourRequests     CustomTourRequest[]
  customBookings         CustomBooking[]
  galleryImages          Gallery[]
  reviewsReceived        Review[]            @relation("ReviewedUser")
  reviewsGiven           Review[]            @relation("ReviewerUser")
  staffProfile           StaffProfile?
  systemLogs             SystemLog[]
  users_A                User[]              @relation("StaffManagement")
  users_B                User[]              @relation("StaffManagement")

  @@map("users")
}

model StaffProfile {
  id                 String              @id @default(cuid())
  userId             String              @unique
  employeeId         String              @unique
  department         Department
  position           String
  salary             Decimal?
  hireDate           DateTime
  bio                String?
  specializations    String[]
  languages          String[]
  rating             Float?              @default(0)
  totalReviews       Int                 @default(0)
  workSchedule       Json?
  isAvailable        Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  customTourRequests CustomTourRequest[]
  customBookings     CustomBooking[]
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("staff_profiles")
}

model Review {
  id             String         @id @default(cuid())
  reviewerId     String
  reviewedUserId String?
  packageId      String?
  rating         Int
  title          String?
  comment        String?
  userName       String?        // Optional display name for review
  userEmail      String?        // Optional email for review
  reviewType     ReviewType     @default(SERVICE)
  bookingId      String?
  isPublic       Boolean        @default(true)
  isVerified     Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  booking        Booking?       @relation(fields: [bookingId], references: [id])
  reviewedUser   User?          @relation("ReviewedUser", fields: [reviewedUserId], references: [id])
  reviewer       User           @relation("ReviewerUser", fields: [reviewerId], references: [id])
  package        TravelPackage? @relation("PackageReviews", fields: [packageId], references: [id])

  @@map("reviews")
}

model Booking {
  id                  String             @id @default(cuid())
  bookingNumber       String             @unique
  customerId          String
  packageId           String?
  startDate           DateTime
  endDate             DateTime
  totalAmount         Decimal
  status              BookingStatus      @default(PENDING)
  assignedStaff       Json?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  bookingType         BookingType        @default(PACKAGE)
  customTourRequestId String?
  customerEmail       String
  customerName        String
  customerPhone       String
  notes               String?
  numberOfPeople      Int                @default(1)
  paymentDate         DateTime?
  paymentMethod       String?
  paymentStatus       PaymentStatus      @default(PENDING)
  specialRequirements String?
  customTourRequest   CustomTourRequest? @relation(fields: [customTourRequestId], references: [id])
  customer            User               @relation(fields: [customerId], references: [id])
  package             TravelPackage?     @relation(fields: [packageId], references: [id])
  reviews             Review[]

  @@map("bookings")
}

model TravelPackage {
  id             String    @id @default(cuid())
  name           String
  title          String?   // Alternative title for display
  description    String
  overview       String?   // Extended description for overview section
  highlights     String[]  // Array of highlight features
  itinerary      Json?     // Detailed itinerary in JSON format
  price          Decimal
  priceDetails   Json?     // Price breakdown by group size, etc.
  duration       Int       // Duration in days
  durationText   String?   // e.g., "5 days 4 nights"
  maxCapacity    Int
  location       String
  destination    String?   // Main destination name
  category       String?   // e.g., "Cultural", "Adventure", "Beach"
  difficulty     String?   // e.g., "Easy", "Moderate", "Challenging"
  includes       String[]  // What's included in the package
  excludes       String[]  // What's not included
  accommodation  Json?     // Accommodation details
  images         String[]  // Main images
  imageUrl       String?   // Primary image URL
  galleryImages  String[]  // Additional gallery images
  isRecommended  Boolean   @default(false)
  isActive       Boolean   @default(true)
  rating         Float?    @default(0)
  totalReviews   Int       @default(0)
  tags           String[]  // Search tags
  seoTitle       String?   // SEO title
  seoDescription String?   // SEO description
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  bookings       Booking[]
  reviews        Review[]  @relation("PackageReviews")

  @@map("travel_packages")
}

model SystemLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@map("system_logs")
}

model Gallery {
  id          String          @id @default(cuid())
  title       String
  description String?
  imageUrl    String
  category    GalleryCategory
  location    String
  tags        String[]
  isActive    Boolean         @default(true)
  uploadedBy  String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  uploader    User?           @relation(fields: [uploadedBy], references: [id])

  @@map("gallery_images")
}

model CustomTourRequest {
  id                  String              @id @default(cuid())
  trackingNumber      String              @unique
  userId              String?
  packageId           Int?                // Reference to the package this request is based on
  selectedGroupSize   Int?                // Group size selected from package pricing
  pricePerPerson      Float?              // Price per person from package
  totalPrice          Float?              // Total price from package pricing
  contactName         String
  contactEmail        String
  contactPhone        String
  destination         String
  startDate           DateTime
  endDate             DateTime
  numberOfPeople      Int
  budget              Float?
  accommodation       String?
  transportation      String?
  activities          String?
  specialRequirements String?
  description         String?
  status              CustomRequestStatus @default(PENDING)
  assignedStaffId     String?
  responseNotes       String?
  estimatedCost       Float?
  responseDate        DateTime?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  bookings            Booking[]
  assignedStaff       StaffProfile?       @relation(fields: [assignedStaffId], references: [id])
  user                User?               @relation(fields: [userId], references: [id])

  @@map("custom_tour_requests")
}

model CustomBooking {
  id                  String              @id @default(cuid())
  customBookingId     String              @unique
  userId              String?
  contactName         String
  contactEmail        String
  contactPhone        String
  destination         String
  tripType            String?
  startDate           DateTime
  endDate             DateTime
  numberOfPeople      Int
  budget              Float
  accommodation       String?
  transportation      String?
  specialRequirements String?
  description         String?
  requireGuide        Boolean             @default(false)
  proposalType        String              @default("custom_booking")
  status              CustomRequestStatus @default(PENDING)
  assignedStaffId     String?
  responseNotes       String?
  quotedPrice         Float?
  responseDate        DateTime?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  assignedStaff       StaffProfile?       @relation(fields: [assignedStaffId], references: [id])
  user                User?               @relation(fields: [userId], references: [id])

  @@map("custom_bookings")
}

enum UserRole {
  USER
  STAFF
  OPERATOR
  ADMIN
  SUPER_ADMIN
}

enum Department {
  TOURS
  CUSTOMER_SERVICE
  SALES
  OPERATIONS
  MANAGEMENT
  FINANCE
  MARKETING
}

enum ReviewType {
  SERVICE
  GUIDE
  OVERALL
  BOOKING
  PACKAGE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  REFUNDED
}

enum BookingType {
  PACKAGE
  CUSTOM
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIAL
  REFUNDED
  FAILED
}

enum GalleryCategory {
  BEACH
  MOUNTAIN
  CITY
  FOREST
  DESERT
  CULTURAL
  ADVENTURE
  LUXURY
  WILDLIFE
  OTHER
}

enum CustomRequestStatus {
  PENDING
  IN_PROGRESS
  QUOTED
  CONFIRMED
  CANCELLED
  COMPLETED
}
