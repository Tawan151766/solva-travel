generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String              @id @default(cuid())
  email                  String              @unique
  password               String?
  firstName              String
  lastName               String
  phone                  String?
  profileImage           String?
  role                   UserRole            @default(USER)
  isActive               Boolean             @default(true)
  isEmailVerified        Boolean             @default(false)
  emailVerificationToken String?
  resetPasswordToken     String?
  resetPasswordExpires   DateTime?
  lastLoginAt            DateTime?
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  
  // NextAuth fields
  emailVerified          DateTime?
  image                  String?
  
  // Relations
  bookings               Booking[]
  customRequests         CustomRequest[]
  galleryImages          Gallery[]
  reviewsReceived        Review[]            @relation("ReviewedUser")
  reviewsGiven           Review[]            @relation("ReviewerUser")
  staffProfile           StaffProfile?
  systemLogs             SystemLog[]
  users_A                User[]              @relation("StaffManagement")
  users_B                User[]              @relation("StaffManagement")
  
  // NextAuth relations
  accounts               Account[]
  sessions               Session[]

  @@map("users")
}

model StaffProfile {
  id                 String              @id @default(cuid())
  userId             String              @unique
  employeeId         String              @unique
  department         Department
  position           String
  salary             Decimal?
  hireDate           DateTime
  bio                String?
  specializations    String[]
  languages          String[]
  rating             Float?              @default(0)
  totalReviews       Int                 @default(0)
  workSchedule       Json?
  isAvailable        Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  bookings           Booking[]
  customRequests     CustomRequest[]
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("staff_profiles")
}

model Review {
  id             String         @id @default(cuid())
  reviewerId     String
  reviewedUserId String?
  rating         Int
  title          String?
  comment        String?
  reviewType     ReviewType     @default(SERVICE)
  isPublic       Boolean        @default(true)
  isVerified     Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  packageId      String?
  userEmail      String?
  userName       String?
  package        TravelPackage? @relation("PackageReviews", fields: [packageId], references: [id])
  reviewedUser   User?          @relation("ReviewedUser", fields: [reviewedUserId], references: [id])
  reviewer       User           @relation("ReviewerUser", fields: [reviewerId], references: [id])

  @@map("reviews")
}

model Booking {
  id                  String             @id @default(cuid())
  bookingNumber       String             @unique
  
  // Customer Information
  userId              String?            // Optional - for registered users
  customerName        String
  customerEmail       String
  customerPhone       String
  
  // Package Information
  packageId           String
  packageName         String
  packageLocation     String
  
  // Booking Details
  startDate           DateTime
  endDate             DateTime
  numberOfPeople      Int
  totalAmount         Decimal
  pricePerPerson      Decimal
  
  // Special Requirements
  specialRequirements String?
  notes               String?
  
  // Status & Payment
  status              BookingStatus      @default(PENDING)
  paymentStatus       PaymentStatus      @default(PENDING)
  paymentMethod       String?
  paymentDate         DateTime?
  
  // Staff Assignment
  assignedStaffId     String?
  
  // Tracking & Timestamps
  trackingId          String             @unique
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  
  // Relations
  user                User?              @relation(fields: [userId], references: [id])
  package             TravelPackage      @relation(fields: [packageId], references: [id])
  assignedStaff       StaffProfile?      @relation(fields: [assignedStaffId], references: [id])

  @@map("bookings")
}

model TravelPackage {
  id             String    @id @default(cuid())
  name           String
  description    String
  price          Decimal
  duration       Int
  maxCapacity    Int
  location       String
  images         String[]
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accommodation  Json?
  category       String?
  destination    String?
  difficulty     String?
  durationText   String?
  excludes       String[]
  highlights     String[]
  imageUrl       String?
  includes       String[]
  isRecommended  Boolean   @default(false)
  itinerary      Json?
  overview       String?
  priceDetails   Json?
  rating         Float?    @default(0)
  seoDescription String?
  seoTitle       String?
  tags           String[]
  title          String?
  totalReviews   Int       @default(0)
  bookings       Booking[]
  galleryImages  Gallery[]
  reviews        Review[]  @relation("PackageReviews")

  @@map("travel_packages")
}

model SystemLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@map("system_logs")
}

model Gallery {
  id          String             @id @default(cuid())
  title       String
  description String?
  imageUrl    String
  category    GalleryCategory
  imageType   GalleryImageType   @default(GALLERY)
  packageId   String?
  location    String
  tags        String[]
  isActive    Boolean            @default(true)
  uploadedBy  String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  package     TravelPackage?     @relation(fields: [packageId], references: [id])
  uploader    User?              @relation(fields: [uploadedBy], references: [id])

  @@map("gallery_images")
}

model CustomRequest {
  id                  String               @id @default(cuid())
  requestNumber       String               @unique
  requestType         CustomRequestType    @default(TOUR_REQUEST)
  userId              String?
  contactName         String
  contactEmail        String
  contactPhone        String
  destination         String
  startDate           DateTime
  endDate             DateTime
  numberOfPeople      Int
  budget              Float?
  accommodation       String?
  transportation      String?
  activities          String?
  specialRequirements String?
  description         String?
  requireGuide        Boolean              @default(false)
  tripType            String?
  status              CustomRequestStatus  @default(PENDING)
  assignedStaffId     String?
  responseNotes       String?
  estimatedCost       Float?
  quotedPrice         Float?
  responseDate        DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  assignedStaff       StaffProfile?        @relation(fields: [assignedStaffId], references: [id])
  user                User?                @relation(fields: [userId], references: [id])

  @@map("custom_requests")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}



enum UserRole {
  USER
  STAFF
  OPERATOR
  ADMIN
  SUPER_ADMIN
}

enum Department {
  TOURS
  CUSTOMER_SERVICE
  SALES
  OPERATIONS
  MANAGEMENT
  FINANCE
  MARKETING
}

enum ReviewType {
  SERVICE
  GUIDE
  OVERALL
  BOOKING
  PACKAGE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIAL
  REFUNDED
  FAILED
}

enum GalleryCategory {
  BEACH
  MOUNTAIN
  CITY
  FOREST
  DESERT
  CULTURAL
  ADVENTURE
  LUXURY
  WILDLIFE
  OTHER
}

enum CustomRequestType {
  TOUR_REQUEST
  CUSTOM_BOOKING
}

enum CustomRequestStatus {
  PENDING
  IN_PROGRESS
  QUOTED
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum GalleryImageType {
  MAIN
  ADDITIONAL
  GALLERY
}
